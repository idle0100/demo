/**
 * 广度优先搜索
 * 题目：
 * 		1. 从上到下打印二叉树
 * 		2. 单词接龙
 * 		3. 员工的重要性
 * 		4. 岛屿数量
 */

type LandType = 0 | 1;

// 题目：给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
// 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
// 此外，你可以假设该网格的四条边均被水包围。
function numIsLands(grid: LandType[][]): number {

	let count = 0;

	for (let i = 0; i < grid.length; i++) {
		for (let j = 0; j < grid[i].length; j++) {
			if (grid[i][j] === 1) {
				count++;
				// 将相邻的1都变为0
			}
		}
	}

	return count;
}


/**
 * 深度优先搜索
 * 题目：
 * 		1. 二叉数的中序遍历
 * 	 	2. 二叉树的最大深度
 * 	 	3. 路径总和
 * 	 	4. 课程表
 * 	 	5. 岛屿数量
 */
